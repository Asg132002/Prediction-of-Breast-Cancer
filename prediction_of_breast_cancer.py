# -*- coding: utf-8 -*-
"""Prediction of Breast Cancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECvV978rZqToTMpyjHFhVBF_t8GUR_M_

Import the Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""Loading the Dataset"""

from google.colab import files
uploaded = files.upload()

import io
df = pd.read_csv(io.BytesIO(uploaded['dataset.csv']))

df.head()

df.shape

# to check for the possible results of cancer i.e. benign or malignant
df.diagnosis.unique()

# count number of Benign and Malignant cases
df.diagnosis.value_counts()

"""Data Preprocessing"""

# remove uneccessary data
#df.drop('id',axis=1,inplace=True)
df.drop('Unnamed: 32',axis=1,inplace=True)

df.head()

#check if any missing value is present
df.isnull().sum()

df['diagnosis'] = df['diagnosis'].map({'M':1,'B':0})
df.head()

"""Splitting the Data into Training Data and Testing Data"""

X = df.drop(['diagnosis'],axis=1)
Y = df['diagnosis']

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2,random_state=20)

"""Feature Scaling"""

from sklearn.preprocessing import StandardScaler
ss=StandardScaler()

X_train = ss.fit_transform(X_train)
X_test = ss.fit_transform(X_test)

""" Build Logistic Regression Model"""

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()

# Training Logistic Regression model using Training Dataset
model = lr.fit(X_train,Y_train)

"""Predict the Test Set Results"""

prediction = model.predict(X_test)

"""Plotting the Confusion Matrix"""

from sklearn.metrics import confusion_matrix

cm = confusion_matrix(Y_test,prediction)
cm

sns.heatmap(cm/np.sum(cm), annot=True, fmt='.2%', cmap='Blues')

"""Evaluating the Model"""

# Calculating Accuracy

# Method - 1
from sklearn.metrics import accuracy_score
accuracy_score(Y_test,prediction)

# Method - 2
TP = cm[0][0]
FP = cm[0][1]
FN = cm[1][0]
TN = cm[1][1]
print("Accuracy = ",(TP+TN)/(TP+FP+FN+TN))

"""Building a Predictive System"""

test_input = (19.17,24.8,132.4,1123,0.0974,0.2458,0.2065,0.1118,0.2397,0.078,0.9555,3.568,11.07,116.2,0.003139,0.08297,0.0889,0.0409,0.04484,0.01284,20.96,29.94,151.7,1332,0.1037,0.3903,0.3639,0.1767,0.3176,0.1023)

#convert tuple to numpy array
test_input_numpyarr = np.asarray(test_input)

#resize array so that model knows to give output to only 1 data
test_input_reshaped = test_input_numpyarr.reshape(1,-1)

pred = model.predict(test_input_reshaped)
if pred[0]==0 :
  print('The Breast Cancer is Benign.')
elif pred[0]==1:
  print('The Breast Cancer is Malignant.')

